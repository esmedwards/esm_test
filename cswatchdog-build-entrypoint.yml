trigger: none

# resources:
#   repositories:
#     - repository: DevOps
#       type: git
#       name: 'Viewfinder Common/DevOps'
#       ref: refs/heads/develop

variables:
- group: 'CS Watchdog Flow Variables'
- name: solution
  value: '**/*.sln'
- name: buildPlatform
  value: 'Any CPU'
- name: buildConfiguration
  value: 'Debug'#'Release'
- name: serviceConnection
  value: 'CS Watchdog Approval Flow Connection'
- name: serviceConnectionExternal
  value: 'watchdog_external'

jobs: 
- job: Invoke_CS_Watchdog
  pool: server
  continueOnError: true
  steps:
  - task: InvokeRESTAPI@1
    displayName: 'Get Approval'
    inputs:
      connectionType: 'connectedServiceName'
      serviceConnection: 'CS Watchdog Approval Flow Connection'
      method: 'POST'
      headers: "{'Content-Type':'application/json',  'AuthToken': '$(system.AccessToken)', 'runKey': '$(cs-watchdog-flow-access-token)'}" 
      body: |
         {
            "buildNumber": "$(build.buildId)",
            "isMultiBranch": "true",
            "branchName": "$(build.sourceBranchName)",
            "PlanUrl": "$(system.CollectionUri)",
            "ProjectId": "$(system.TeamProjectId)",
            "HubName": "$(system.HostType)",
            "PlanId": "$(system.PlanId)",
            "JobId": "$(system.JobId)",
            "TimelineId": "$(system.TimelineId)",
            "TaskInstanceId": "$(system.TaskInstanceId)",
            "QueuedBy": "$(build.QueuedBy)",
            "buildConfiguration": "$(buildConfiguration)",
            "buildPlatform": "$(buildPlatform)",
            "solution": "$(solution)"
         }
      urlSuffix: "&sig=$(cs-watchdog-flow-trigger-sig)"
      waitForCompletion: 'true'
      # successCriteria: eq(root['status'], 'successful')

- job: Retrieve_Variables_From_Key_Vault
  pool:
    Default
  continueOnError: true
  steps:
  - task: AzureKeyVault@1
    inputs:
      azureSubscription: $(serviceConnectionExternal)
      KeyVaultName: 'cswatchdog-external-kv'
      SecretsFilter: 'cs-watchdog-flow-access-token'
    displayName: 'Get key vault secrets as pipeline variables'
  - task: CmdLine@2
    displayName: Use Secret Values
    inputs:
      script: |
        echo $(cs-watchdog-flow-access-token)
        echo $(cs-watchdog-flow-trigger-sig)
        echo $(sm-api-key)
        echo $(sm-client-cert-password)
        echo "$(sm-client-cert-file)" >> pkcs11properties.cfg
        echo "$(sm-sign-cert-file)" >> signing.crt
        echo "$sm-sign-cert-file" >> signing1.crt
